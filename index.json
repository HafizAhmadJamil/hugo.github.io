[{"body":"Docker: The Ultimate Toolbox for Developers Table of Contents  What is Docker and Why Should You Care? How Does Docker Work? The Benefits of Using Docker  Consistency Across Environments Easier Collaboration Scalability Made Simple   How to Get Started with Docker  Installing Docker Creating Your First Container Exploring Docker Hub   Common Misconceptions About Docker Conclusion  What is Docker and Why Should You Care? Imagine trying to build a house without the right tools. Frustrating, right? That’s how many developers feel when they don’t have the right software solutions. Docker is like that toolbox, but for developers. It simplifies the process of creating, deploying, and running applications by using containers. These containers hold everything an app needs to run, from the code to the libraries, all bundled up and ready to go. This means you can focus on building your app instead of worrying about whether it’ll work on someone else's computer.\nHow Does Docker Work? Docker uses a technology called containerization. Think of it as packing a suitcase for your application. You throw in all the clothes, toiletries, and gadgets you need. When you reach your destination, everything is right where you left it. In the same way, Docker containers package your application and all its dependencies into one neat bundle. When you deploy that container, it works anywhere—on your laptop, in the cloud, or on a server. No surprises, no hassle.\nThe Benefits of Using Docker Consistency Across Environments Have you ever faced that dreaded “it works on my machine” problem? Docker eliminates this headache. Since containers are consistent across all environments, you can rest easy knowing that your app will behave the same way everywhere.\nEasier Collaboration Working in a team can be challenging, especially if everyone’s using different setups. Docker allows team members to share containers easily. It’s like sharing a lunchbox filled with the same delicious meal. Everyone gets the same tasty experience, and you don’t have to worry about mismatched ingredients.\nScalability Made Simple Imagine you need to feed a large crowd. Instead of cooking one meal at a time, wouldn’t it be easier to whip up several dishes simultaneously? Docker lets you scale your applications quickly. You can spin up multiple containers as traffic increases, ensuring your app stays responsive and performs well under pressure.\nHow to Get Started with Docker Installing Docker Getting started with Docker is a breeze. Just head over to the Docker website, download the installer for your operating system, and follow the setup instructions. It's like setting up an app on your phone—pretty straightforward and user-friendly.\nCreating Your First Container Once Docker’s installed, it’s time to create your first container. You can do this with just a few commands. Think of it as baking your first cake. You gather your ingredients (the app code), mix everything together (create the container), and then bake it (run the app). Voilà! You’ve got your first Docker container up and running.\nExploring Docker Hub Docker Hub is like a vast library full of container images. You can find pre-built images for almost anything—databases, web servers, you name it. Explore Docker Hub to find the right images for your projects. It’s like having a treasure chest of resources at your fingertips.\nCommon Misconceptions About Docker Docker is Only for Experts Some folks think that Docker is too advanced or complicated. In reality, it’s designed for everyone—from beginners to experts. Once you get the hang of it, you’ll see that it’s a powerful tool for all levels of developers.\nDocker is Just for Microservices While Docker shines in microservices architecture, it’s not limited to that. Whether you’re building a simple website or a complex app, Docker can streamline your workflow. It’s like a Swiss Army knife, versatile and handy.\nConclusion Docker is more than just a tech buzzword; it’s a game changer for developers everywhere. By simplifying application deployment and ensuring consistency, it empowers you to focus on what really matters—building great software. So, why not dive in and start exploring Docker? You might just find that it’s the toolbox you’ve been searching for all along.\n","link":"https://hafizahmadjamil.github.io/hugo.github.io/docker/docker1/","section":"docker","tags":null,"title":"Docker"},{"body":"Unleashing the Power of Kubernetes: Your Guide to Container Orchestration Magic Table of Contents  What is Kubernetes, Anyway? Why Use Kubernetes? Key Features of Kubernetes  Self-Healing Capabilities Load Balancing Scalability   How Does Kubernetes Work?  Pods Nodes Clusters   Getting Started with Kubernetes The Future of Kubernetes Conclusion: Embrace the Kubernetes Revolution  What is Kubernetes, Anyway? Managing modern applications can feel like juggling ten balls simultaneously. Kubernetes is like the ultimate juggler, keeping everything organized and under control. It’s an open-source platform designed to automate the deployment, scaling, and management of containerized applications. Picture it as the conductor of an orchestra, ensuring every musician plays in harmony.\nWhy Use Kubernetes? You might ask, \u0026quot;Why do I need Kubernetes?\u0026quot; The answer is straightforward: efficiency. Kubernetes allows you to manage hundreds of containers with ease. It’s akin to having a superpower that lets you launch new applications swiftly, scale them as needed, and maintain smooth operations. If you’ve faced downtime or performance issues, you understand the need for a dependable system. Kubernetes serves as your safety net, keeping your applications available even when things get rough.\nKey Features of Kubernetes Self-Healing Capabilities Imagine a resilient plant that thrives regardless of conditions. That's how Kubernetes handles failures. If a container crashes, Kubernetes automatically replaces it, like a dedicated gardener ensuring your plants stay healthy and well-maintained. You can focus on developing your application while Kubernetes manages any interruptions.\nLoad Balancing Think of a bustling restaurant. Without a good host, diners would wait endlessly, and the kitchen would be overwhelmed. Kubernetes acts as that host, evenly distributing incoming traffic across your containers. This prevents any single container from becoming overloaded while others remain idle. Your application runs seamlessly, and everyone gets served.\nScalability Ever wished to rapidly expand your business? Kubernetes allows you to do just that. When your app gains popularity, you can quickly scale up your resources. It’s like having a magic button that instantly adds more chairs to your restaurant. Whether you need to support 10 users or 10,000, Kubernetes has you covered.\nHow Does Kubernetes Work? At its core, Kubernetes operates with several key components:\nPods Pods are the basic units of your application. Each pod can house one or more containers sharing resources. When deploying an application, you’re essentially creating pods that run within your cluster.\nNodes Nodes are the physical or virtual machines that execute your pods. Like a team of workers in a factory, nodes handle the heavy lifting. Kubernetes monitors these nodes to ensure they function correctly.\nClusters A cluster is a collection of nodes working together. Think of it as a sports team where each member has a role. Kubernetes coordinates these nodes, ensuring they work together seamlessly.\nGetting Started with Kubernetes Starting with Kubernetes might seem intimidating, but it’s quite manageable. Begin by setting up your environment. You can use local solutions like Minikube or opt for cloud providers such as Google Cloud or AWS. Once your environment is ready, deploy your first application!\nCreate a deployment file describing your app, and let Kubernetes handle the rest. You’ll see your application running, scaling, and self-healing in no time.\nThe Future of Kubernetes As cloud computing evolves, Kubernetes is becoming the go-to tool for developers. Its ability to streamline processes, enhance resilience, and accelerate deployment makes it essential in modern software development. With the rise of microservices architecture, Kubernetes is poised to be at the forefront of application development and maintenance in the future.\nConclusion: Embrace the Kubernetes Revolution In a fast-paced tech landscape, Kubernetes stands out as a transformative tool that empowers developers to manage applications efficiently. With its self-healing capabilities, load balancing, and scalability, Kubernetes is more than just a buzzword; it’s a game-changer. Ready to elevate your application management? Dive into Kubernetes and embrace the future of container orchestration!\n","link":"https://hafizahmadjamil.github.io/hugo.github.io/kubernetes/kube1/","section":"kubernetes","tags":null,"title":"Kubernetes"},{"body":"Discovering Linux: Your Gateway to a Smarter Computing World Table of Contents  What is Linux and Why Should You Care? The Power of Open Source Why Choose Linux for Your Computer?  Speed and Performance Security at Its Best Customizability Free to Use   An Easy Start with Linux Community Support: The Heart of Linux Conclusion: Embrace the Linux Revolution  What is Linux and Why Should You Care? Linux is like the popular kid at school, but instead of being a person, it’s an operating system. Just like Windows or macOS, Linux helps you run your computer, but it does so with a unique twist. It’s open-source, meaning anyone can access and modify its code. This makes Linux the ultimate playground for tech enthusiasts. Why settle for the ordinary when you can unleash your inner geek with Linux?\nThe Power of Open Source Imagine building a treehouse with your friends. Each of you has different ideas on how it should look, and everyone contributes. That’s what open-source means in the software world. With Linux, developers worldwide collaborate to create something amazing. This teamwork results in a smoother, more secure, and innovative operating system. With thousands of distributions (or \u0026quot;distros\u0026quot;) like Ubuntu, Fedora, and Debian, there’s a flavor for everyone. It’s like choosing between chocolate, vanilla, or strawberry ice cream!\nWhy Choose Linux for Your Computer? Speed and Performance Ever noticed how some computers slow down over time? That’s often due to heavy software. Linux, on the other hand, is lightweight and efficient. It’s like driving a sports car instead of a clunky old truck. You’ll experience faster boot times and smoother application performance, even on older hardware.\nSecurity at Its Best When it comes to security, Linux is like a fortress. Viruses and malware are far less common on this platform, making it a strong choice for protecting your data. The community actively patches vulnerabilities, ensuring a lower risk of digital break-ins.\nCustomizability Do you love personalizing your gadgets? Linux lets you do just that! You can modify the look, feel, and functionality of your operating system. Want a sleek interface? Go for KDE. Prefer a minimalist vibe? Check out Xfce. It’s like being the artist of your own tech masterpiece!\nFree to Use Unlike some operating systems that come with a price tag, Linux is free! You can download, install, and use it without spending a dime. It’s like discovering a treasure chest with no strings attached. This makes it especially appealing for students and budget-conscious users.\nAn Easy Start with Linux If you’re new to Linux, don’t worry! Getting started is easier than you might think. Most distributions come with user-friendly interfaces. For example, Ubuntu’s desktop is intuitive and welcoming, like stepping into your favorite café. With numerous online tutorials and communities, help is always just a click away.\nCommunity Support: The Heart of Linux One of the coolest aspects of using Linux is the community. Think of it as a large family gathering where everyone shares stories and tips. Whether you encounter an issue or want to learn something new, there’s always someone willing to assist. Online forums, social media groups, and dedicated websites ensure you’re never alone on your Linux journey.\nConclusion: Embrace the Linux Revolution Linux isn’t just for techies or programmers; it’s for anyone seeking a powerful, flexible, and secure computing experience. With its open-source nature, speed, and a supportive community, why not give it a try? It’s like stepping into a world where you can shape your digital experience. So, are you ready to dive into the Linux adventure? Your new operating system awaits!\n","link":"https://hafizahmadjamil.github.io/hugo.github.io/linux/linux1/","section":"linux","tags":null,"title":"Linux"},{"body":"Overview Virtualization is a technology that enables the creation of IT services using resources traditionally tied to physical hardware. By distributing a physical machine's capabilities across multiple users or environments, virtualization helps to maximize its utilization.\nTable of Contents  Overview Practical Example Server Usage A Brief History of Virtualization How Virtualization Works Types of Virtualization  Data Virtualization Desktop Virtualization Server Virtualization Operating System Virtualization Network Functions Virtualization (NFV)    Practical Example Imagine you have three physical servers, each with a dedicated purpose: one for email, one for web hosting, and one for running internal legacy applications. If each server is only operating at about 30% capacity, virtualization allows you to repurpose these servers. For instance, you can split the mail server into two virtual servers to handle separate tasks, freeing up resources for the legacy applications. This means you can use the hardware more efficiently without needing to add new physical servers.\nServer Usage Traditionally, servers were dedicated to specific tasks: one server, one operating system, one function. Virtualization changes this by allowing multiple virtual servers to run on the same physical hardware, increasing utilization from 30% to potentially 90%. This approach not only improves efficiency but also allows you to retire or repurpose underutilized servers, reducing cooling and maintenance costs.\nA Brief History of Virtualization Though the concept of virtualization dates back to the 1960s, it only gained widespread adoption in the early 2000s. Initially, virtualization technologies like hypervisors were developed to provide multiple users simultaneous access to computers performing batch processing. Despite its early inception, virtualization lagged behind other solutions like time-sharing, which led to operating systems like UNIX and eventually Linux®.\nIn the 1990s, with the rise of affordable commodity servers and diverse IT environments, virtualization became a key solution. It allowed companies to partition servers and run legacy applications on different operating systems, leading to more efficient use of hardware and reduced costs associated with purchase, setup, cooling, and maintenance.\nHow Virtualization Works Virtualization relies on hypervisors to separate physical resources from virtual environments. Hypervisors can be installed on top of an operating system or directly onto hardware. They allocate physical resources to virtual machines (VMs) or guest machines, which operate as if they are on their own physical hardware. When a virtual environment requests additional resources, the hypervisor efficiently manages these requests, ensuring performance is close to native speed, especially with open-source hypervisors like KVM (Kernel-based Virtual Machine).\nTypes of Virtualization Data Virtualization Data virtualization consolidates data from multiple sources into a single view. It allows companies to treat data as a dynamic resource, providing a unified source that can accommodate new data sources and transform data according to user needs. This approach simplifies data access and integration.\nDesktop Virtualization Desktop virtualization enables the deployment of simulated desktop environments to multiple physical machines from a central location. Unlike traditional methods where desktops are individually installed and updated, desktop virtualization allows administrators to manage configurations, updates, and security from a central point, making it easier to maintain and scale.\nServer Virtualization Server virtualization partitions a physical server into multiple virtual servers, each capable of running specific tasks. This allows a single server to handle various functions simultaneously, improving efficiency and reducing the need for additional physical servers.\nOperating System Virtualization Operating system virtualization operates at the kernel level, allowing multiple virtual operating systems to run on the same physical machine. This approach supports running different environments side-by-side, such as Linux and Windows, while reducing hardware costs and increasing security by isolating virtual instances.\nNetwork Functions Virtualization (NFV) Network functions virtualization separates key network functions (like directory services, file sharing, and IP configuration) from physical hardware. This separation allows network functions to be distributed and managed independently of physical components, reducing the need for physical network infrastructure and streamlining network management. NFV is particularly popular in the telecommunications industry.\nFor further details on each type of virtualization, feel free to explore additional resources and documentation.\n","link":"https://hafizahmadjamil.github.io/hugo.github.io/virtualization/proxmox1/","section":"virtualization","tags":null,"title":"Proxmox1"},{"body":"Discover What's New in Proxmox 8.2: Features and Download Information Explore the exciting new features of Proxmox 8.2, including enhancements in automated installations, Cloudinit templates, backups, storage, and networking.\nTable of Contents  Automated and Unattended Installations VMware ESX VM Import Wizard nftables Firewall LXC Device Passthrough Advanced Backup Settings Extended ACME-Enabled CAs User Interface Enhancements Core Technology Updates  Proxmox 8.2 New Features Automated and Unattended Installations Streamline your setup process with new automated and unattended installation options.\nVMware ESX VM Import Wizard Easily import VMware ESX virtual machines with the new import wizard.\nnftables Firewall Upgrade your firewall management with nftables for improved network security.\nLXC Device Passthrough Support for LXC device passthrough allows for more flexible container configurations.\nAdvanced Backup Settings Take advantage of advanced backup settings for better data protection and recovery options.\nExtended ACME-Enabled CAs Utilize a broader range of ACME-enabled Certificate Authorities for more SSL/TLS certificate options.\nUser Interface Enhancements Enjoy a more intuitive and streamlined user interface.\nCore Technology Updates Benefit from various core technology updates that enhance performance and stability.\nFor more details and to download Proxmox 8.2, visit the official Proxmox website.\n","link":"https://hafizahmadjamil.github.io/hugo.github.io/virtualization/proxmox3/","section":"virtualization","tags":null,"title":"Proxmox3"},{"body":"About Me Welcome to my blog!\nI’m a seasoned IT professional with a robust background in a variety of technologies and methodologies. My expertise spans across several domains, enabling me to deliver comprehensive solutions in today's dynamic technological landscape. Here’s a snapshot of my key skills and areas of specialization:\nKey Skills  Operation \u0026amp; Maintenance: Proficient in ensuring seamless operation and maintenance of IT infrastructure. Network Security: Adept at implementing and managing security measures to protect network assets. Office 365 Suite: Experienced in managing and optimizing the Office 365 ecosystem for organizational efficiency. AD, DNS, WDS, MDT, RPS: Skilled in handling Active Directory, DNS, Windows Deployment Services, Microsoft Deployment Toolkit, and Remote Provisioning Services. ASA, FortiGate, Palo Alto: Expertise in managing and securing networks using Cisco ASA, FortiGate, and Palo Alto firewalls. Cross Functional Collaboration: Effective in working with diverse teams to achieve common goals. Virtualization (VMware / ESXI): Experienced in deploying and managing virtual environments using VMware and ESXi. Routing and Switching: Competent in configuring and troubleshooting network routing and switching. Team Management: Proven track record in leading and managing IT teams to drive performance and productivity. ITSM System Administration: Knowledgeable in IT Service Management (ITSM) for efficient system administration. Cloud Services (GCP / AWS): Proficient in leveraging cloud platforms like Google Cloud Platform and AWS for scalable solutions. Scripting \u0026amp; Automation: Skilled in scripting and automating processes to enhance efficiency and reduce manual intervention. Project Management: Capable of managing projects from inception to completion, ensuring timely delivery and adherence to objectives. Cisco ISE \u0026amp; Aruba CPPM: Expertise in implementing and managing network access control solutions using Cisco ISE and Aruba ClearPass. Remote Troubleshooting: Effective in diagnosing and resolving issues remotely, ensuring minimal disruption.  In my role, I thrive on the challenge of solving complex problems and implementing innovative solutions. I believe in the power of collaboration and continuous learning to stay ahead in the ever-evolving world of technology.\nFeel free to explore my blog for insights, tutorials, and tips on various IT topics. If you have any questions or want to connect, don’t hesitate to reach out!\n Imtiaz Ali\n","link":"https://hafizahmadjamil.github.io/hugo.github.io/about/","section":"","tags":null,"title":"About"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/","section":"","tags":null,"title":""},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/series/ansible/","section":"series","tags":null,"title":"Ansible"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/categories/cloud/","section":"categories","tags":null,"title":"Cloud"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/series/docker/","section":"series","tags":null,"title":"Docker"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/tags/hugo/","section":"tags","tags":null,"title":"Hugo"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/series/kubernetes/","section":"series","tags":null,"title":"Kubernetes"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/categories/linux/","section":"categories","tags":null,"title":"Linux"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"Page bundles are an optional way to organize page resources within Hugo.\nYou can opt-in to using page bundles in Hugo Clarity with usePageBundles in your site configuration or in a page's front matter. Read more about usePageBundles.\nWith page bundles, resources for a page or section, like images or attached files, live in the same directory as the content itself rather than in your static directory.\nHugo Clarity supports the use of leaf bundles, which are any directories within the content directory that contain an index.md file. Hugo's documentation gives this example:\n1content 2├── about 3│ ├── index.md 4├── posts 5│ ├── my-post 6│ │ ├── content1.md 7│ │ ├── content2.md 8│ │ ├── image1.jpg 9│ │ ├── image2.png 10│ │ └── index.md 11│ └── my-other-post 12│ └── index.md 13│ 14└── another-section 15 ├── .. 16 └── not-a-leaf-bundle 17 ├── .. 18 └── another-leaf-bundle 19 └── index.md  In the above example `content` directory, there are four leaf bundles: about: This leaf bundle is at the root level (directly under content directory) and has only the index.md.\nmy-post: This leaf bundle has the index.md, two other content Markdown files and two image files. image1 is a page resource of my-post and only available in my-post/index.md resources. image2 is a page resource of my-post and only available in my-post/index.md resources.\nmy-other-post: This leaf bundle has only the index.md.\nanother-leaf-bundle: This leaf bundle is nested under couple of directories. This bundle also has only the index.md.\nThe hierarchy depth at which a leaf bundle is created does not matter, as long as it is not inside another leaf bundle.\n Advantages to using page bundles The image below is part of the bundle of this page, and is located at content/post/bundle/building.png. Because it's within this page's bundle, the markup for the image only has to specify the image's filename, building.png.\n     If you ever change the name of the directory in which this Markdown file and the image reside, the reference to the image would not need to be updated.\nIn addition to more cleanly organizing your content and related assets, when using page bundles, Hugo Clarity will automatically generate markup for modern image formats, which are smaller in file size.\nFor instance, when you reference an image like building.png, Hugo Clarity will check to see if the same image (based on filename) exists in WebP, AVIF or JXL formats. If you inspect the image above, you'll see a \u0026lt;source\u0026gt; element for building.webp, because that file is also present. Hugo Clarity will only include the markup if these images exist.\nBrowsers that support these formats and the \u0026lt;picture\u0026gt; element will load them, while browsers that do not will fall-back to the default image. Read more about this process.\nFinally, note that page assets can be further managed and refined within the page's front matter if you wish, and are not limited to images alone.\nDisadvantages to using page bundles Page resources in a bundle are only available to the page with which they are bundled — that means you can't include an image with one page and then reference it from another.\nImages that are being used in multiple places are more appropriate for your Hugo assets directory. Unlike files in the Hugo static directory, files in the assets directory can be run through Hugo Pipes, which includes image processing.\n","link":"https://hafizahmadjamil.github.io/hugo.github.io/post/bundle/","section":"post","tags":["Hugo"],"title":"Using Hugo page bundles folder"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/categories/virtual-machine/","section":"categories","tags":null,"title":"Virtual Machine"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/series/virtualization/","section":"series","tags":null,"title":"Virtualization"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/tags/cloud-init/","section":"tags","tags":null,"title":"Cloud Init"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/tags/cloud-vm/","section":"tags","tags":null,"title":"Cloud VM"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/docker/","section":"docker","tags":null,"title":"Docker"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/kubernetes/","section":"kubernetes","tags":null,"title":"Kubernetes"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/linux/","section":"linux","tags":null,"title":"Linux"},{"body":"Discover What's New in Proxmox 8.2: Features and Download Information Explore the exciting new features of Proxmox 8.2, including enhancements in automated installations, Cloudinit templates, backups, storage, and networking.\nTable of Contents  Automated and Unattended Installations VMware ESX VM Import Wizard nftables Firewall LXC Device Passthrough Advanced Backup Settings Extended ACME-Enabled CAs User Interface Enhancements Core Technology Updates  Proxmox 8.2 New Features Automated and Unattended Installations Streamline your setup process with new automated and unattended installation options.\nVMware ESX VM Import Wizard Easily import VMware ESX virtual machines with the new import wizard.\nnftables Firewall Upgrade your firewall management with nftables for improved network security.\nLXC Device Passthrough Support for LXC device passthrough allows for more flexible container configurations.\nAdvanced Backup Settings Take advantage of advanced backup settings for better data protection and recovery options.\nExtended ACME-Enabled CAs Utilize a broader range of ACME-enabled Certificate Authorities for more SSL/TLS certificate options.\nUser Interface Enhancements Enjoy a more intuitive and streamlined user interface.\nCore Technology Updates Benefit from various core technology updates that enhance performance and stability.\nFor more details and to download Proxmox 8.2, visit the official Proxmox website.\n","link":"https://hafizahmadjamil.github.io/hugo.github.io/virtualization/proxmox2/","section":"virtualization","tags":["Virtualization","Cloud VM","Cloud Init"],"title":"Proxmox2"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/categories/technology/","section":"categories","tags":null,"title":"Technology"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/tags/virtualization/","section":"tags","tags":null,"title":"Virtualization"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/virtualization/","section":"virtualization","tags":null,"title":"Virtualization"},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/archives/","section":"","tags":null,"title":""},{"body":"","link":"https://hafizahmadjamil.github.io/hugo.github.io/tags/index/","section":"tags","tags":null,"title":"index"}]